{"version":3,"sources":["component/Profile.js","features/user.js","component/Login.js","features/theme.js","component/ChangeColor.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","user","useSelector","state","value","themeColor","theme","style","color","name","age","email","initialStateValue","userSlice","createSlice","initialState","reducers","login","action","payload","logout","actions","Login","dispatch","useDispatch","onClick","themeSlice","changeColor","ChangeColor","useState","setColor","type","onChange","event","target","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","useReducer","themeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAiBeA,MAff,WACI,IAAMC,EAAMC,aAAY,SAACC,GAAD,OAASA,EAAMF,KAAKG,SACtCC,EAAYH,aAAY,SAACC,GAAD,OAASA,EAAMG,MAAMF,SAGnD,OACI,sBAAKG,MAAO,CAACC,MAAMH,GAAnB,UACI,8CACA,sCAASJ,EAAKQ,QACd,qCAAQR,EAAKS,OACb,uCAAUT,EAAKU,a,OCVrBC,EAAkB,CAACH,KAAM,GAAGC,IAAK,EAAEC,MAAO,IACnCE,EAAUC,YAAY,CAC/BL,KAAK,OACLM,aAAa,CAACX,MAAM,CAACK,KAAM,GAAGC,IAAK,EAAEC,MAAO,KAC5CK,SAAS,CACbC,MAAM,SAACd,EAAMe,GACbf,EAAMC,MAAMc,EAAOC,SAEnBC,OAAO,SAACjB,EAAMe,GACVf,EAAMC,MAAMQ,MAKT,EAAsBC,EAAUQ,QAAzBJ,EAAP,EAAOA,MAAOG,EAAd,EAAcA,OACNP,IAAf,QCHeS,MAXf,WACI,IAAMC,EAAWC,cACjB,OACI,gCAEI,wBAAQC,QAAS,WAAKF,EAASN,EAAM,CAACR,KAAM,SAASC,IAAK,EAAEC,MAAO,uBAAnE,mBACL,wBAAQc,QAAS,WAAKF,EAASH,MAA/B,wB,OCNMM,EAAWZ,YAAY,CAChCL,KAAK,QACLM,aAAa,CAACX,MAHM,IAIpBY,SAAS,CACbW,YAAY,SAACxB,EAAMe,GACnBf,EAAMC,MAAMc,EAAOC,YAMLQ,EAAaD,EAAWL,QAAxBM,YACCD,IAAf,QCEeE,MAbf,WACI,MAAyBC,mBAAS,IAAlC,mBAAOrB,EAAP,KAAasB,EAAb,KACMP,EAAWC,cACjB,OACI,gCACI,uBAAOO,KAAK,OAAOC,SAAU,SAACC,GAASH,EAASG,EAAMC,OAAO9B,UAE7D,wBAAQqB,QAAS,WAAKF,EAASI,EAAYnB,KAA3C,8BCGG2B,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACJ,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCGeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,EAAOC,YAAe,CAC1BC,QAAQ,CACN/C,KAAKgD,EACL3C,MAAM4C,KAIVC,IAASC,OAEL,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACF,cAAC,EAAD,QAIFQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.b24b63e5.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nfunction Profile() {\r\n    const user =useSelector((state)=>state.user.value);\r\n    const themeColor =useSelector((state)=>state.theme.value);\r\n\r\n\r\n    return (\r\n        <div style={{color:themeColor}}>\r\n            <h1>Profile Page</h1>\r\n            <p>Name:{user.name}</p>\r\n            <p>Age:{user.age}</p>\r\n            <p>Email:{user.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import { createSlice }from '@reduxjs/toolkit';\r\n\r\nconst initialStateValue={name: \"\",age: 0,email: \"\"};\r\nexport const userSlice=createSlice({\r\n    name:\"user\",\r\n    initialState:{value:{name: \"\",age: 0,email: \"\"}},\r\n    reducers:{\r\nlogin:(state,action) =>{\r\nstate.value=action.payload;\r\n},\r\nlogout:(state,action)=>{\r\n    state.value=initialStateValue;\r\n},\r\n},\r\n});\r\n\r\nexport const {login, logout}=userSlice.actions;\r\nexport default userSlice.reducer;","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport {login,logout} from \"../features/user\";\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n           \r\n            <button onClick={()=>{dispatch(login({name: \"moulya\",age: 4,email: \"moulya@gmail.com\"}))}}>Login</button>\r\n       <button onClick={()=>{dispatch(logout())}}>LOGOUT</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import { createSlice }from '@reduxjs/toolkit';\r\n\r\nconst initialStateValue=\"\";\r\nexport const themeSlice=createSlice({\r\n    name:\"theme\",\r\n    initialState:{value: initialStateValue},\r\n    reducers:{\r\nchangeColor:(state,action) =>{\r\nstate.value=action.payload;\r\n},\r\n\r\n},\r\n});\r\n\r\nexport const {changeColor}=themeSlice.actions;\r\nexport default themeSlice.reducer;","import React, {useState} from 'react'\r\nimport { useDispatch } from \"react-redux\";\r\nimport{ changeColor } from \"../features/theme\";\r\n\r\nfunction ChangeColor() {\r\n    const [color,setColor] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={(event)=>{setColor(event.target.value);}}\r\n            />\r\n            <button onClick={()=>{dispatch(changeColor(color))}}>CHANGE COLOR</button>\r\n        \r\n                </div>\r\n    )\r\n}\r\n\r\nexport default ChangeColor\r\n","import './App.css';\nimport Profile from './component/Profile';\nimport Login from './component/Login';\nimport ChangeColor from './component/ChangeColor';\nfunction App() {\n  return (\n    <div className=\"App\">\n<Profile/>\n<Login/>\n<ChangeColor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport useReducer from \"./features/user\";\nimport themeReducer from './features/theme';\nconst store= configureStore({\n  reducer:{\n    user:useReducer,\n    theme:themeReducer,\n  },\n})\n\nReactDOM.render(\n \n    <React.StrictMode>\n      <Provider store={store}>\n    <App />\n    </Provider>\n    </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}